#version 330 core

// Ouput to fragment shader
out vec3 color;
uniform vec4 materialCoefficients;

in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec3 eyeVector;
in vec4 lightVector;


void main()
{
    // set the fragment color to the interpolated vertex color
    color = v_color.rgb;

    vec3 N = normalize(normal);
    vec3 L = normalize(vec3(lightVector) + eyeVector);

    float d = length(L);
    float attenuation = 0.0;
    if (lightVector[3] == 0.0) {
        L = normalize(vec3(lightVector));
        attenuation = 1.0;
    } else {
        float kC = 0.05;
        float kL = 0.02;
        float kQ = 0.002;
        attenuation = (1 / (kC + kL * d + kQ * d * d));
    }

      // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(eyeVector); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, materialCoefficients[3]);
    }

    float kA = materialCoefficients[0];
    float kD = materialCoefficients[1];
    float kS = materialCoefficients[2];
    color = kA * v_color.rgb + attenuation * (kD * specular * v_color.rgb + kS * lambertian * v_color.rgb);
}