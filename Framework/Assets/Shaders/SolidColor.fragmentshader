#version 330 core

// Ouput to fragment shader
out vec3 color;
uniform vec4 materialCoefficients;

in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec3 eyeVector;
in vec4 lightVector;


void main()
{
    vec3 N = normalize(normal);
    vec3 L = normalize(vec3(lightVector));

    //float d = length(L);
    //float attenuation = 0.0;
    //float kC = 0.05;
    //float kL = 0.02;
    //float kQ = 0.002;
    //attenuation = (1 / (kC + kL * d + kQ * d * d));
	//attenuation = 1.0;
   
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);

    float specular = 0.0f;

    if(lambertian > 0.0) {
        // vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 E = normalize(eyeVector); // Vector to viewer

        // Compute the specular term
        float specAngle = max(dot(L, E), 0.0);
        //specular = pow(specAngle, materialCoefficients[3]);
        specular = pow(specAngle, 50.0f);
    }

	
    //float kA = materialCoefficients[0];
    //float kD = materialCoefficients[1];
    //float kS = materialCoefficients[2];
    float kA = 0.5f;
    float kD = 1.0f;
    float kS = 0.2f;
    color = v_color.rgb * (kA + kD * lambertian0 + kS * specular);
}